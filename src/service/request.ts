import WebSocketRouter, { ServerConfig } from './router';

export interface Service {
    name: string
    endpoints: Endpoint[]
}

export interface EndpointArgument {
    unit: string
    streamed?: boolean
}

export interface Endpoint {
    path: string
    id: number
    in?: EndpointArgument
    out?: EndpointArgument
}

/**
 * Configures a singleton router to use by default for all requests. This is an alternative to passing a WebSocketRouter
 * parameter when calling a request<endpointName>() function generated by the compiler.
 */
export class GlobalServer {
    static config: ServerConfig
    static connection: WebSocketRouter
    static set(newConfig: ServerConfig) {
        this.config = newConfig
    }

    static async open(token?: string) {
        if (!this.config) {
            throw new Error("GlobalServer not configured. Use GlobalConfig.set() to configure.")
        }

        this.connection = new WebSocketRouter(this.config, token)
        await this.connection.waitForConnection()
    }

    private static ensureOpen() {
        if (!this.connection || !this.connection.webSocket.isReady) {
            throw new Error("WebSocket connection not open")
        }
    }

    static close() {
        this.ensureOpen()
        this.connection.webSocket.close()
    }

    static async setAuth(token: string, timeout = 5000) {
        this.ensureOpen()
        await this.connection.setAuth(token, timeout)
    }
}
